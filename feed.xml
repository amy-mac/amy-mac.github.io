<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-08-02T14:07:48-07:00</updated><id>http://localhost:4000/</id><title type="html">My Blog</title><subtitle>Mostly about tech stuff</subtitle><entry><title type="html">A Mental Checklist When I Do Code Reviews</title><link href="http://localhost:4000/blog/2018/07/code-reviews/" rel="alternate" type="text/html" title="A Mental Checklist When I Do Code Reviews" /><published>2018-07-24T22:09:18-07:00</published><updated>2018-07-24T22:09:18-07:00</updated><id>http://localhost:4000/blog/2018/07/code-reviews</id><content type="html" xml:base="http://localhost:4000/blog/2018/07/code-reviews/">&lt;p&gt;Some of the things that I’m thinking about when I am doing a front-end code review…&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL:DR&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Accessibility&lt;/li&gt;
  &lt;li&gt;Cross browser compatibility&lt;/li&gt;
  &lt;li&gt;DRY/DRW&lt;/li&gt;
  &lt;li&gt;Maintainability&lt;/li&gt;
  &lt;li&gt;Performance&lt;/li&gt;
  &lt;li&gt;Security&lt;/li&gt;
  &lt;li&gt;Style/Formatting&lt;/li&gt;
  &lt;li&gt;Tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve done my fair share of code reviews over the years, and continue doing so on an almost daily basis. At my old job, you would usually only perform a code review if you were requested on one, and I remember being so excited when I started being requested for them because it meant that I would have the opportunity to prevent bad front-end code from getting into the codebase in the first place (a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&lt;/code&gt; for every element on the page, anyone?) But I soon learned there’s much more to code reviews than just preventing bugs or pointing out stylistic issues. &lt;strong&gt;They are also a great learning experience&lt;/strong&gt;. I’ve learned so much from reviewing other developers’ code over time, and it not only made me a better programmer, but has made me more thorough in my reviews—and in some of the positions I’ve held, you have to be, because there’s a lot more at stake.&lt;/p&gt;

&lt;p&gt;There are lots of articles out there about how to do code reviews, why you should do code reviews, and so on. I’d like to talk about what I look for when I’m performing code reviews, also known as: the things that I think about when I’m writing code. I’ve never made an official checklist, though it’s often helpful when a team/company decides amongst itself what it considers important, and has checklists and/or guidelines to follow; but this is basically a mental checklist I think of every time.&lt;/p&gt;

&lt;h2 id=&quot;accessibility&quot;&gt;Accessibility&lt;/h2&gt;
&lt;p&gt;This is a first class concern of mine, and what I find a lot of people don’t realize is that if you are writing semantic &lt;abbr title=&quot;HyperText Markup Language&quot;&gt;HTML&lt;/abbr&gt; and using the right element in the right circumstance, then you’re already writing mostly accessible HTML. So I’m a stickler about using proper HTML, and this tends to be where a lot of my comments lie. Are you using the right element? Are you using the correct attributes? Are you thinking about structure and layout? Are your images presentational or do they need to communicate something? Are you making sure interactive elements show focus properly? And so on…&lt;/p&gt;

&lt;h2 id=&quot;cross-browser-compatibility&quot;&gt;Cross Browser Compatibility&lt;/h2&gt;
&lt;p&gt;Let’s be real here, not only do a lot of people not have the luxury of developing for only the most modern browsers, but even the most modern browsers have quirks. Sorry folks, some things just aren’t going to look or act the same way in Firefox as they do in Chrome. You might not be familiar with all the quirks, known issues, or what is now standard, and that’s okay, but if you write front-end code then you should always be checking that what you’re writing looks consistent and works in all the major browsers your company supports. Download them all and get used to using them. Bookmark &lt;a href=&quot;https://www.caniuse.com&quot; target=&quot;_blank&quot;&gt;caniuse.com&lt;/a&gt;, and get yourself a &lt;abbr title=&quot;Virtual Machine&quot;&gt;VM&lt;/abbr&gt;. &lt;strong&gt;No excuses&lt;/strong&gt;. You develop for the world-wide web. (Also please don’t use vendor prefixes for &lt;abbr title=&quot;Cascading Style Sheets&quot;&gt;CSS&lt;/abbr&gt; declarations that have been standard in all browsers since 2008, because it’s unnecessary weight).&lt;/p&gt;

&lt;h2 id=&quot;drydrw&quot;&gt;DRY/DRW&lt;/h2&gt;
&lt;p&gt;Everyone is familiar with &lt;em&gt;“Don’t Repeat Yourself”&lt;/em&gt;, so yes I look out for repetition when someone is performing the same action over and over and it would be better to extract it into a method. However, there’s a bigger issue I tend to see that’s similar, which is &lt;em&gt;“don’t recreate the wheel.”&lt;/em&gt; There are often duplicates of functions/methods that do the exact same thing and yet more will be added. When I’m working on a new area of a codebase that I haven’t worked on before I try to do a quick read-through of the classes and their methods to see what is already available to use and might pertain to the new enhancement/feature I need to create. Whoo hoo, less work, this query already exists, and so on.&lt;/p&gt;

&lt;p&gt;In the same vein it’s also good to have re-useable components in an app not only for ease of use, but to keep an app looking/behaving consistently. So I keep a look out for anything that looks suspiciously like something that already exists. There’s another part of this too though, and that’s doing a whole lot of unnecessary work to create something from scratch that you can get from a library that is tried and tested. I’ll say that most of the time I find that libraries/plugins are added to codebases unnecessarily and weigh down the app when it could have been written much simpler. But there are valid use cases for using a library/plugin instead of rolling your own. I often remind myself of this when there’s some new functionality that needs to be introduced that has probably already been done bulletproof before. So it’s always good to check and see if you can find something that simply and effectively fits your use case before spending months recreating the wheel that could be much faultier.&lt;/p&gt;

&lt;h2 id=&quot;maintainability&quot;&gt;MAINTAINABILITY&lt;/h2&gt;
&lt;p&gt;This actually kind of ties in with DRY, because I often see places where partial templates or helper methods would prevent future disasters of having to remember to change something in all these different spots, where it’s not necessarily a “find and replace” sort of scenario. I used to work on a very large enterprise web app that had existed for 8 years before I got there, and I can’t tell you how many times I saw something get changed in one spot but no one thought to update it in other spots, which caused bugs and customer aggravation, so I suppose I’m a little hyper aware of these things. I suppose the point is: be kind to your future self and the future others who will work on this code. If you can’t be DRY, then at least document things and leave directions. I’ve heard some argue that code should be written clearly enough that comments aren’t needed, but code comments should explain WHY and not WHAT, and sometimes how things connect to each other. You’ll thank yourself later.&lt;/p&gt;

&lt;h2 id=&quot;performance&quot;&gt;PERFORMANCE&lt;/h2&gt;
&lt;p&gt;I find a lot of people are somewhat cognizant of performance if they’re writing queries, but don’t necessarily take it into consideration in other circumstances. I try to think of the cost of everything I add, and the larger picture. (Side note: I take pride when I can delete more code than I add in). Best case scenario: people are just impatient when browsing your site. Worst case scenario: people can legit not access your site on mobile or in areas with lower speed internet. Think of performance always.&lt;/p&gt;

&lt;p&gt;What this means for me usually comes down to a lot of front-end issues. Are you adding more &lt;abbr title=&quot;Document Object Model&quot;&gt;DOM&lt;/abbr&gt; nodes than necessary? Why does it take 5 nested &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s to render a line of text? Are you using an HTML element improperly, causing you to have to add a ton of CSS to make it behave like a different HTML element? Are you loading a ton of &lt;abbr title=&quot;Javascript&quot;&gt;JS&lt;/abbr&gt; and/or CSS that will never be used by this page? Are you fetching large images from the server only to have CSS show it smaller? Are you adding unnecessary JS instead of just using an HTML element that already does that? (I once had to explain to someone that you can just use the “target” attribute on a link tag to open up the link in a new tab instead of writing extra JS to do the same thing). And if you are adding necessary JS, are you making sure that it is performant? Or are you re-querying the DOM over and over unnecessarily? And you looping through items in an inefficient manner? Or on the server, do you have an action being performed before every single call, when it doesn’t need to be? Obviously there’s a ton that goes into front-end performance, and the more you can help people be aware of all the little ways it can be affected, you can slowly get everyone to improve it over time.&lt;/p&gt;

&lt;h2 id=&quot;security&quot;&gt;SECURITY&lt;/h2&gt;
&lt;p&gt;Of course it’s always good to check for the oldies but goodies: &lt;abbr title=&quot;Cross Site Scripting&quot;&gt;XSS&lt;/abbr&gt;, SQL injection, unencrypted data, but as we experience a growing number of front-end frameworks being used that handle lots of information passed in from the server, I find myself having to check more often that sensitive information isn’t being exposed in the DOM that shouldn’t be, and people can easily be tripped up by that, especially when server rendering React components. I think developers are so used to being able to manipulate data on the server safely before rendering an HTML view that it just doesn’t occur to them that you can’t just blindly pass that same data to the front-end for it to use. So I’ve tried to start being extra careful myself about only giving the front-end the data it actually needs and remind others as well.&lt;/p&gt;

&lt;h2 id=&quot;styleformatting&quot;&gt;STYLE/FORMATTING&lt;/h2&gt;
&lt;p&gt;In an ideal world you have a set style guide that everyone has agreed upon, and you have linters and/or formatters assisting in doing the heavy-lifting so that you don’t have to, but that’s not always the case. I’ve learned to not be nit-picky about style and let a lot of things go. When it comes to possible errors, however, I try to pick up the slack when the linters aren’t enough. Missing semicolons are an issue when you want to minify your JS (see Performance). Forgetting a closing &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/div&amp;gt;&lt;/code&gt; can completely break Internet Explorer (see Cross Browser Compatibility). In other words, these things do matter.&lt;/p&gt;

&lt;h2 id=&quot;tests&quot;&gt;TESTS&lt;/h2&gt;
&lt;p&gt;Not much to say here. Most of the time I like writing tests, and I feel a special delight when they catch a legitimate bug, but there are certainly moments when I’m feeling lazy and wish I was just done with my current task, but I always overcome it, suck it up and do it. Tests are important, and I think most people would agree to that. I don’t often have to ask, “Should there be a test for this?” I do often comment though on how tests could be better, because they either have redundant scenarios or take too much time to run because they’re not taking advantage of time saving measures like not writing to the database superfluously. Sometimes the assertions aren’t asserting what they say they’re asserting, which is also wasteful. So I make sure to give tests just as much attention as the rest of a pull request, because fast test suites equal happy developers, and accurate tests equal happy everybody.&lt;/p&gt;

&lt;h2 id=&quot;typos&quot;&gt;TYPOS&lt;/h2&gt;
&lt;p&gt;The truth is I don’t actually look for typos but have accidentally been a human spell-check for as long as I can remember. I’m good at proofreading. It is rare that I don’t notice misspelled words when reading things others have written. Advantage or curse? You decide. Honestly it’s kind of annoying.&lt;/p&gt;

&lt;h2 id=&quot;the-bigger-picture&quot;&gt;THE BIGGER PICTURE&lt;/h2&gt;
&lt;p&gt;A lot of these things would be considered being among the weeds, and it’s always good to keep in mind the architecture of the application and how it all fits together, which can be harder to do if you’re looking for some of the smaller things. That’s something linters and pre-commit hooks can help with; taking care of the little things so you don’t have to and then it’s easier to notice things the author may not have noticed or thought of because they were so deep amongst the weeds. A second pair of eyes can always help, because they’re looking at something fresh. I had an art teacher in college who would often remind us to step back from our work and view it from across the room. It is very beneficial.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I hope this encourages others to start thinking about some of these elements if they aren’t already. And finally, I always look for cool things that the author did and make sure to comment on it, whatever it may be. Maybe it’s great test coverage, or a cleverly named method, but we all work hard and it’s nice to be acknowledged.&lt;/p&gt;</content><author><name>amy@amy-mac.com</name></author><category term="Code Reviews" /><category term="Methodology" /><summary type="html">Some of the things that I’m thinking about when I am doing a front-end code review…</summary></entry><entry><title type="html">A Sort of Love Letter to HTML</title><link href="http://localhost:4000/blog/2018/01/HTML-is-the-bomb/" rel="alternate" type="text/html" title="A Sort of Love Letter to HTML" /><published>2018-01-01T09:00:00-08:00</published><updated>2018-01-01T09:00:00-08:00</updated><id>http://localhost:4000/blog/2018/01/HTML-is-the-bomb</id><content type="html" xml:base="http://localhost:4000/blog/2018/01/HTML-is-the-bomb/">&lt;p&gt;&lt;img src=&quot;https://imgs.xkcd.com/comics/tags.png&quot; alt=&quot;XKCD Comic&quot; title=&quot;&amp;lt;A&amp;gt;: Like &amp;lt;/a&amp;gt;this.&amp;nbsp;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve been studying HTML since 1999, and like everything else it has grown and advanced over time, and I’m still learning new things you can do with it all the time. Unfortunately it tends to be one of the under-appreciated parts of web development, especially for those coming from a background of backend development. I want to explain some of the major points about why it is worth all developers time to fully understand it in order to have a more effective front-end.&lt;/p&gt;

&lt;h2 id=&quot;performance&quot;&gt;Performance&lt;/h2&gt;
&lt;p&gt;We can all agree that we want our websites to be fast, right? One of the ways you can do that is by simply reducing the amount of DOM nodes on a page, or in other words, using less HTML elements. But wait, didn’t I just say, “Yay! HTML is the best! HTML for life!” Truth, but less is more. You want to use HTML &lt;em&gt;effectively&lt;/em&gt;, and just like we don’t want a bunch of messy spaghetti JavaScript around, we need to respect the structure of the page and be strident about using the best tool for the job as you build the foundation of each page.&lt;/p&gt;

&lt;p&gt;Here’s why:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The more DOM nodes you have, the longer it takes to download that page from the server. HTML usually isn’t responsible for the major chunk of page load time, that award tends to go to images and scripts, but every little bit counts!&lt;/li&gt;
  &lt;li&gt;CSS has to parse the entire DOM to figure out where it needs to apply the styles, and of course CSS performance in itself is a huge topic we won’t get into. The point is that the less unnecessary HTML elements on the page, the less work the stylesheets have to do, which results in better performance.&lt;/li&gt;
  &lt;li&gt;Likewise, when you are querying the DOM in JavaScript or jQuery, the more DOM nodes you have, the harder it has to work to find the element you want. This is why developers tend to save the queried element into a variable when they’re working with it, because it takes precious milliseconds to query it again and again. But why not make that initial search as fast as possible as well?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Every time I am working heavily on the HTML of a particular page for the first time, the first thing I’ll do is go through and rip out all the superfluous elements. I clean house, so to speak. So now you’re probably asking, “What are all these superfluous elements you keep talking about?” Basically, I’m talking about any element that does not need to be there for the look of the webpage to remain the same. The biggest offenders are pretty easy to spot.&lt;/p&gt;

&lt;p&gt;Here’s what to keep an eye out for:&lt;/p&gt;

&lt;h3 id=&quot;divs-and-spans-that-have-no-classes-ids-or-attributes&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;’s and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&lt;/code&gt;’s that have no classes, IDs, or attributes&lt;/h3&gt;
&lt;p&gt;There might be a good reason that you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; as a container for a collection of elements because of its inherent block properties, or maybe you have the styling on the parent element that targets all of its children, but more often than not if I see a bunch of plain &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;’s being nested, they are serving absolutely no purpose whatsoever. Along the same lines, those plain &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&lt;/code&gt;s are usually a red flag. The entire purpose of a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&lt;/code&gt; is to be able to target something small that you want to style differently than everything else around it.&lt;/p&gt;

&lt;p&gt;Like this &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt;span page from MDN&lt;/a&gt; says, “&lt;em&gt;It should be used only when no other semantic element is appropriate&lt;/em&gt;,” and if you look at that page, you’ll see that both examples show it being added unnecessarily. The first, because it is unstyled and does absolutely nothing. The second example is unnecessary because the background-color can be put on the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element. A much better example of a proper use case is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blueText&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Blue&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; is my favorite color&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Where there would be a class that makes that one word Blue, and the rest of the text in the paragraph is a different color.&lt;/p&gt;

&lt;p&gt;Another thing to look out for is multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;br/&amp;gt;&lt;/code&gt; tags in a row. This is usually a sign that the element correct element.There are other elements that might be hanging out for no reason, too, but I’m focusing on these because they’re the two biggest offenders that I have come across.&lt;/p&gt;

&lt;h3 id=&quot;empty-elements&quot;&gt;Empty Elements&lt;/h3&gt;
&lt;p&gt;I tend to spend a lot of time in the browser’s inspector, and sometimes I’ll see multiple elements that contain nothing. Not elements like the ones in the previous section, but elements that look like they should actually be doing something, because they have IDs, classes, and/or attributes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;importantThing blueVelvet&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So I immediately wonder why it’s there and go look up the code, and it’s almost always the result of some conditional.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;importantThing blueVelvet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% if &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%&amp;gt;
    &amp;lt;%= user.city %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% end &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Or what I tend to see in React code is that there won’t even be the conditional, but it’ll have a variable value there that happens to be blank, so you see nothing on the page, but these nodes still are clogging up the DOM for no reason. Now as with anything, there are perfectly good use cases for having placeholder elements in the DOM, like if you know you’re going to be loading something there dynamically, for example. But if that’s not the case then I encourage you to place the HTML elements &lt;strong&gt;within&lt;/strong&gt; the conditional and if there is no conditional, add one!&lt;/p&gt;

&lt;h3 id=&quot;using-the-right-tool-for-the-job&quot;&gt;Using the right tool for the job&lt;/h3&gt;
&lt;p&gt;Sometimes you can reduce the amount of nodes by simply using the proper HTML element, which is why it’s important to be familiar with them and what they do. Every HTML element has inherent properties and semantic value: there are block level elements, inline elements, elements that have more meaning than others (semantics). The elements behave in different ways and if you aren’t using them for what they were meant for, you might have to have extra elements, and you might have to add more styling than would have been necessary. A really extreme example would be putting a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; on a page with some text that you want to click on in order to visit another page by adding an &lt;code class=&quot;highlighter-rouge&quot;&gt;onClick&lt;/code&gt; handler to that &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and then making an AJAX call or calling &lt;code class=&quot;highlighter-rouge&quot;&gt;window.location(&quot;/link.html&quot;)&lt;/code&gt;. You’re probably not going to do that right? Why go to all that work, when you can simply use a normal &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag for your link that has all that functionality built into it?&lt;/p&gt;

&lt;p&gt;Some less extreme, but common examples are cases like the multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;br/&amp;gt;&lt;/code&gt; tags I mentioned above. If you are trying to put extra space between two blocks of text, then you probably aren’t using paragraph tags and should be. If you are separating out chunks of text within a single paragraph tag, then you aren’t using enough paragraph tags. Paragraph tags are block level elements that inherently have spacing above and below them.&lt;/p&gt;

&lt;p&gt;Another example would be changing a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&lt;/code&gt; through CSS to be a block-level element instead of just using a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, or adding a bunch of CSS/JS to make a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; act like a button instead of just using the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;button&amp;gt;&lt;/code&gt; tag. You get a lot of functionality for free when you use the proper element. Buttons are inherently tabbable, they can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;disabled&lt;/code&gt; attribute, and they also have many special HTML5 attributes that can do lots of things.&lt;/p&gt;

&lt;p&gt;In general, I encourage you to explore all that different attributes that can be used on a particular element, because that’s how you learn just how powerful HTML can be, which brings me to the next special mention: HTML5.&lt;/p&gt;

&lt;h4 id=&quot;you-might-not-need-cssjavascript&quot;&gt;You might not need CSS/JavaScript&lt;/h4&gt;
&lt;p&gt;You’ve probably seen &lt;a href=&quot;http://youmightnotneedjquery.com/&quot;&gt;“You Might Not Need jQuery”&lt;/a&gt; and &lt;a href=&quot;http://youmightnotneedjs.com/&quot;&gt;“You Might Not Need JS”&lt;/a&gt;, but I’m here to tell you that &lt;em&gt;you might not need anything but HTML&lt;/em&gt;. If you’re an old school developer, you might not be as familiar with all the fantastic things you can do with plain old HTML elements, and I’m always surprised that HTML5 isn’t used more being that it’s pretty old now. One of the areas it really shines is with forms.&lt;/p&gt;

&lt;p&gt;You have an input field and you only want the user to be able to enter numbers, so you have a backend validation to ensure that the value is numeric when it hits the server. Backend validations are important; they are the last line of defense before it hits the database, but why waste that time traveling all the way to the server initially? So you decide to implement some client-side validations to catch it without making a server call, and that’s pretty easy to do using &lt;code class=&quot;highlighter-rouge&quot;&gt;isNaN(value)&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;$.isNumeric(value)&lt;/code&gt;, but if you’re doing that, then you’re working way too hard. All you have to do is tell your field what type it should be: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input type=&quot;number&quot;&amp;gt;&lt;/code&gt; and it won’t even &lt;strong&gt;allow&lt;/strong&gt; the user to enter anything but numbers. “But what if I want to make sure they only enter positive numbers? Or limit it?” you might ask. You still don’t need JS. Other attributes you can use on that field are &lt;code class=&quot;highlighter-rouge&quot;&gt;min&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;max&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is just one example, but there are many other special input types that can be used in forms that almost completely eliminate the need to use JavaScript for validations or to restrict input. Some of them even do fancy things that previously developers would have used a special plugin for. You want the user to input a date and want them to be able to choose from a pop-up calendar? &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input type=&quot;date&quot;&amp;gt;&lt;/code&gt; will do this in every browser but Safari and Internet Explorer (sadly it falls back to a normal text input field), so plugins aren’t completely obsolete in that case, but it can fit a lot of use cases. Another fun one is &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input type=&quot;color&quot;&amp;gt;&lt;/code&gt; for letting users pick a color from a pop-up palette. I encourage you to explore all the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt;different input types and their attributes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;accessibility-a11y&quot;&gt;Accessibility (A11y)&lt;/h2&gt;
&lt;p&gt;Another very important reason to understand HTML and its proper uses? Accessibility is important. I won’t elaborate all the reasons why because there are &lt;a href=&quot;https://www.google.com/search?ei=beFKWozBNcj10wLhqarADw&amp;amp;q=why+web+accessibility+is+important&amp;amp;oq=why+web+accessibility+is+important&amp;amp;gs_l=psy-ab.3..0j0i8i30k1l2.17319.28996.0.29228.25.24.1.0.0.0.148.2417.14j10.24.0....0...1c.1.64.psy-ab..1.24.2315...0i22i30k1j0i67k1j0i22i10i30k1j33i160k1j0i7i30k1j0i8i7i30k1.0.2c5tAmYU_zI&quot;&gt;countless articles&lt;/a&gt; and books that will do that much better, but I will sum it up by saying that your website being accessible &lt;strong&gt;enhances the user experience for everyone&lt;/strong&gt;. I’m also not going to talk about all the techniques to make your site accessible because that’s a huge topic all its own. What I want to focus on, in the spirit of this article, is how using proper HTML elements (the right tool for the job, again) will already make your webpage much more accessible than it would be otherwise.&lt;/p&gt;

&lt;h3 id=&quot;semantic-html&quot;&gt;&lt;a href=&quot;https://www.thoughtco.com/why-use-semantic-html-3468271&quot;&gt;Semantic HTML&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I suppose having also studied print design and typography, that my love of clean layouts and meaningful structure has also carried over to web development. So I was pretty excited about the increase of semantic tags when HTML5 came around. Providing more meaning to the elements not only helps accessibility but is an all-around win, in my opinion. Long gone are the days where &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s ruled the lands. Now we have &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;section&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;article&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;aside&amp;gt;&lt;/code&gt;, and so on. Even before HTML5 though, there were a large amount of tags that weren’t being used when they should be.&lt;/p&gt;

&lt;p&gt;Let’s take tables for example. Tables no longer rule the web either, but they still have a good purposes and lots of associated tags that go with them. Yet somehow I’ll see table after table only make use of &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;table&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;tr&amp;gt;&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;td&lt;/code&gt;, oftentimes with the first table row trying to act as headers. If a table has headers, it should at the very least be using &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;th&amp;gt;&lt;/code&gt; for the header cells, but ideally using &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;thead&amp;gt;&lt;/code&gt; as well. The browser will treat these differently than just another table row, and semantically it means something.&lt;/p&gt;

&lt;p&gt;I still see &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;i&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;b&amp;gt;&lt;/code&gt; used more often than &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;, probably because old habits die hard. The former still have uses, but the latter should always be used when you’re trying to place actual emphasis on something; not for styling reasons, but because of the meaning it conveys.&lt;/p&gt;

&lt;h3 id=&quot;how-proper-html-helps-keyboard-accessibility&quot;&gt;How proper HTML helps keyboard accessibility&lt;/h3&gt;
&lt;p&gt;All sites should be fully accessible by keyboard, and there are certain keys that users expect to be able to use to do this, because it’s the standard. Most people know they can tab through form elements and tend to do it without thinking about it. This is another case where you want to use the right tool for the job, because the exact kinds of things on the page that the user would want to navigate to are tabbable by default, without you having to do anything. This is why structure is important, and this is why the right element is important. Links, buttons, and input fields all have that functionality built in. This is why you don’t want to use a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; in place of a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;button&amp;gt;&lt;/code&gt;, or a link that doesn’t actually use an &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag. It is also why the order of elements matter, because tabbing follows DOM structure, and not the visual structure on the page. So if you’re floating &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;button&amp;gt;&lt;/code&gt;s and they appear in a different order on the page because of it, that’s going to confuse the user when the element they expect to be selected does not actually get selected.&lt;/p&gt;

&lt;p&gt;Sometimes that’s not going to cut it. You might have a link menu hidden as a dropdown, and then you’re going to have to make that parent element open and close when tabbed to, but by being mindful of using the right elements for the job, you’re still halfway there.&lt;/p&gt;

&lt;p&gt;Links also accept the “Enter” key by default. So if you are focused on a link and hit enter, it will go to that link. In forms, if you are focused on any input field within a form and hit enter, unless there is underlying code telling it to not behave like normal (&lt;a href=&quot;https://www.tjvantoll.com/2013/01/01/enter-should-submit-forms-stop-messing-with-that/&quot;&gt;here’s a nice article about why you should rarely suppress this&lt;/a&gt;), it will automatically submit the form.&lt;/p&gt;

&lt;h3 id=&quot;how-proper-html-helps-screen-readers&quot;&gt;How proper HTML helps screen-readers&lt;/h3&gt;
&lt;p&gt;There are a large amount of people in the world who have visibility issues, so they make use of screen-readers, and there is no feature that you as a developer turn on for this to work. A screenreader can read what’s on any website, but how much of that is coherent &lt;em&gt;does&lt;/em&gt; depend on what you as a developer have put there. This is why the aforementioned semantics are important, but there are also some basic HTML attributes that aid screen-readers. One that most people know about is the &lt;code class=&quot;highlighter-rouge&quot;&gt;alt&lt;/code&gt; attribute on images (alternative text), and yet it is so neglected. It’s often left blank when it shouldn’t be, filled in when it shouldn’t be, or the information doesn’t describe the image at all, rendering it useless. Let me hit on each of those points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If it is important that a particular image is conveyed to the user (a graph, a visual representation of something being described, etc) then you absolutely want an &lt;code class=&quot;highlighter-rouge&quot;&gt;alt&lt;/code&gt; attribute.&lt;/li&gt;
  &lt;li&gt;If the image is completely unimportant, like a visual flourish, or an icon to represent text that comes immediately before or after it, then you &lt;em&gt;do not want an &lt;code class=&quot;highlighter-rouge&quot;&gt;alt&lt;/code&gt; attribute&lt;/em&gt;. Why? You’re not only throwing a mess of unimportant information at the user, but in many cases you’re just making it repeat the same word twice, which is confusing. This is also where ARIA roles come into play, but the most basic thing you can do in this situation is to intentionally identify a blank &lt;code class=&quot;highlighter-rouge&quot;&gt;alt=&quot;&quot;&lt;/code&gt; attribute. If you don’t put in any &lt;code class=&quot;highlighter-rouge&quot;&gt;alt&lt;/code&gt; attribute at all, the screenreader/browser will just guess it by reading the file name or &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;If you have an image of the user and your &lt;code class=&quot;highlighter-rouge&quot;&gt;alt&lt;/code&gt; text is “User”, or it’s the logo of your company and it just says “Logo” or “Company Name”, you are not helping anyone. At the very least be a little more descriptive: “Your profile picture”, “Company Name’s logo”, but even better, be really descriptive if it’s an important visual. “Image of a brown horse with black hair” helps you imagine something much more than “Pic of horse”.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another common misuse of HTML I come across is not labeling input fields. All input fields should have an associated label element and this is not accomplished by just having text near an input field. It may look fine to you visually and you might be able to deduce that they go together, but screen-readers won’t. Screen-readers expect that any input field that is selected should be able to tell them what that input field is for. There are two main ways to make sure your fields are labeled properly. The first is to simply wrap your input field in the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;label&amp;gt;&lt;/code&gt; element like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;label&amp;gt;&lt;/span&gt;
  Your name
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I know some developers might not like to use that method because they have special styling on all &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;label&amp;gt;&lt;/code&gt;s that they don’t want on the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; field and that’s fair enough, you just have to get explicit, and this is where I see the HTML fall way short.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Your name&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The above does not associate the label with the input field. Proximity does not equal association. This is where the &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; attribute comes in.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userName&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Your name&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userName&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The above associates the fields by matching up the &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; attribute with the &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; of the field. If your &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; attribute and &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; attribute don’t match up, then it does not work (I see this happen a lot). Sometimes you might not want the label there visually, or have an extra field associated with that same label. No problem, you can either hide the label, or add an ARIA attribute to the input field that specifies the labeling, but never just leave a field label-less. Screen-readers don’t read placeholders. I should also note that if you want your form elements to be fully accessible for all screen-readers then it’s best to cover your bases and have both the &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; attribute AND nest your &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;label&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An added benefit of labeling inputs properly: they’re easier to select and click, which makes them more accessible! Especially checkboxes and radio buttons, which have a very small click area. This is because it allows you to be able to click on the label text to select the element. Also note that for radio buttons, you should use the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt; tag to group the radio inputs together, where the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;legend&amp;gt;&lt;/code&gt; serves as the parent label while each input still has its own.&lt;/p&gt;

&lt;p&gt;These are things that should be considered the basics of HTML, making use of the built in attributes and structure to better serve a diverse user base.&lt;/p&gt;

&lt;h2 id=&quot;you-dont-have-to-work-as-hard&quot;&gt;You don’t have to work as hard&lt;/h2&gt;
&lt;p&gt;If anything else, understanding HTML should be encouraged because it makes your work easier. It can reduce the need for both styling and scripting, and makes the world wide web a happier place.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Abbreviations&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTML: HyperText Markup Language&lt;/li&gt;
  &lt;li&gt;DOM: Document Object Model&lt;/li&gt;
  &lt;li&gt;ARIA: Accessible Rich Internet Applications&lt;/li&gt;
&lt;/ul&gt;</content><author><name>amy@amy-mac.com</name></author><category term="HTML" /><summary type="html"></summary></entry><entry><title type="html">From Coupa to Glassbreakers</title><link href="http://localhost:4000/blog/2017/09/coupa-to-glassbreakers/" rel="alternate" type="text/html" title="From Coupa to Glassbreakers" /><published>2017-09-03T14:09:18-07:00</published><updated>2017-09-03T14:09:18-07:00</updated><id>http://localhost:4000/blog/2017/09/coupa-to-glassbreakers</id><content type="html" xml:base="http://localhost:4000/blog/2017/09/coupa-to-glassbreakers/">&lt;p&gt;It’s been way too long since I’ve written a post on this particular blog, so what better occasion than to announce that after 3 1/2 years I have left my job at Coupa Software. My last day was on August 18th and I will certainly miss the friends I made there, but it was definitely time for a change.&lt;/p&gt;

&lt;p&gt;So one week ago I started my new role at &lt;a href=&quot;http://www.glassbreakers.co&quot;&gt;Glassbreakers&lt;/a&gt;, which is a much smaller company and located closer to home. I am very excited about this new adventure and looking forward to the future. I also am excited that my new job will allow me to have a much better work/life balance so that I’ll get more time with my kids and actually have time for my passion projects. Looking forward to talking more about those soon.&lt;/p&gt;

&lt;p&gt;I may even finally have a chance to upgrade my personal site’s infrastructure and give it some much needed TLC. Here’s to hoping :-)&lt;/p&gt;</content><author><name>amy@amy-mac.com</name></author><category term="Glassbreakers" /><category term="Coupa" /><summary type="html">It’s been way too long since I’ve written a post on this particular blog, so what better occasion than to announce that after 3 1/2 years I have left my job at Coupa Software. My last day was on August 18th and I will certainly miss the friends I made there, but it was definitely time for a change.</summary></entry><entry><title type="html">Drag from Desktop Tricks</title><link href="http://localhost:4000/blog/2014/03/drag-from-desktop/" rel="alternate" type="text/html" title="Drag from Desktop Tricks" /><published>2014-03-26T14:09:18-07:00</published><updated>2014-03-26T14:09:18-07:00</updated><id>http://localhost:4000/blog/2014/03/drag-from-desktop</id><content type="html" xml:base="http://localhost:4000/blog/2014/03/drag-from-desktop/">&lt;p&gt;Lately I’ve been reading a whole lot about drag and drop while I’ve tried to implement a ‘drag from desktop to upload’ feature. While some of these features have been around for a very long time, others are new and therefore finicky.&lt;/p&gt;

&lt;p&gt;One of the annoying things about dragging files from the desktop is that there are only 3 events that the browser will recognize for this target: &lt;code class=&quot;highlighter-rouge&quot;&gt;dragenter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;dragover&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;drop&lt;/code&gt;; whereas when you drag items that are already in the browser you also have &lt;code class=&quot;highlighter-rouge&quot;&gt;dragstart&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;drag&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;dragend&lt;/code&gt;. I read a lot of articles telling you that you &lt;strong&gt;can’t&lt;/strong&gt; do these things, but I wasn’t satisfied with that. I knew there had to be a way to cheat. There are in fact a couple ways that you can fake the drag start and drag end events. Here are the tricks:&lt;/p&gt;

&lt;h2 id=&quot;on-drag-start&quot;&gt;On Drag Start&lt;/h2&gt;

&lt;p&gt;If there’s nothing that you want to happen when an item starts being dragged then you’re a lucky person, because you won’t care that you can’t initiate anything at the beginning of a drag. But what if you want a drop zone to become apparent when an item starts being dragged, or some other kind of notice or action that helps the user? There might be multiple ways to get around this, but the best way I’ve found so far is to simply attach an event listener to the &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt; tag for &lt;code class=&quot;highlighter-rouge&quot;&gt;dragover&lt;/code&gt; like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dragenter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stopPropagation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// Whatever action you want performed when the drag starts&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This works well because of course the body covers every last inch of your viewport, so as soon as the dragged item enters the window it’ll start picking up that something is being dragged, so you effectively are faking a &lt;code class=&quot;highlighter-rouge&quot;&gt;dragstart&lt;/code&gt; event.&lt;/p&gt;

&lt;h2 id=&quot;on-drag-end&quot;&gt;On Drag End&lt;/h2&gt;

&lt;p&gt;Here’s the tougher one. Most people will find themselves wanting something to happen when the dragging has stopped, even if it’s just telling the hover CSS on the drop zone to go away. It’s pretty easy to take care of any drag end actions if something has been properly dropped in the drop zone, because then you just tack on all the actions to the &lt;code class=&quot;highlighter-rouge&quot;&gt;drop&lt;/code&gt; event. What if they stop mid-drag, however? Say you have the drop zone light up when an item starts being dragged and halfway there they let go of the mouse for whatever reason. Oops, the drop zone is still lit up and could even be preventing further actions. The way I solved this last one is by adding an event listener to the body once again for a drop event.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'drop'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stopPropagation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// Whatever actions you want to stop doing when the drag ends&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is effective for two reasons. One is that up to date browsers will automatically open files that you drop into them and you don’t want to have that happen if you’re letting users drop things in from the desktop and want to prevent the default behavior if they accidentally miss the drop zone. That’s why those &lt;code class=&quot;highlighter-rouge&quot;&gt;preventDefault()&lt;/code&gt; functions are so important. You’re saying, “Hey browser, don’t do your thing because I’ll take it from here.” Then the second reason is to of course cancel any actions that you were performing on drag. This will probably be the same thing you were telling the ‘drop’ function to stop doing once the item was properly dropped.&lt;/p&gt;

&lt;p&gt;Now here’s where it got tough. What if instead of prematurely letting go of the item somewhere on the page, they drag it back to the desktop and let go? How do you account for that? I played around with a couple possible solutions, such as listening for the &lt;code class=&quot;highlighter-rouge&quot;&gt;mouseleave&lt;/code&gt; event on the body but just like the drag events, the body won’t recognize a &lt;code class=&quot;highlighter-rouge&quot;&gt;mouseleave&lt;/code&gt; event that takes place when you’ve dragged something from outside the browser.&lt;/p&gt;

&lt;p&gt;The answer ended up being what takes place after that: the &lt;code class=&quot;highlighter-rouge&quot;&gt;mouseenter&lt;/code&gt; event. Once they’ve dragged something back to the desktop the mouse has to re-enter the body again if it wants to do anything on the page and it will be without the dragged item, so voila!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mouseenter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stopPropagation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Whatever actions you want to stop doing when a drag ends&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s not an ideal solution of course because you’ll have a lot of unnecessary events triggering if the user just happens to keep waving their mouse in and out of the browser, but it works and is better than the alternative of your users no longer being able to use the drop zone areas because they’re blocked by new CSS items or overlays, etc.&lt;/p&gt;

&lt;p&gt;And finally a working example for you—try dragging a file in from your desktop and performing the scenarios mentioned above.&lt;/p&gt;

&lt;div id=&quot;dropzone&quot; style=&quot;width:200px;height:200px;border:3px dashed #CCC;margin:0 auto 10px;text-align:center;&quot;&gt;&lt;p style=&quot;font-size:24px;font-weight:bold;color:red;margin-top:20px;display:none;&quot;&gt;Drop Here!&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;I’d love to hear any better ideas people have come up with for mimicking the drag start and end events; feel free to comment!&lt;/p&gt;</content><author><name>amy@amy-mac.com</name></author><category term="JavaScript" /><category term="Drag and Drop" /><category term="Tricks" /><summary type="html">Lately I’ve been reading a whole lot about drag and drop while I’ve tried to implement a ‘drag from desktop to upload’ feature. While some of these features have been around for a very long time, others are new and therefore finicky.</summary></entry><entry><title type="html">Final Thoughts on General Assembly</title><link href="http://localhost:4000/blog/2014/03/final-thoughts/" rel="alternate" type="text/html" title="Final Thoughts on General Assembly" /><published>2014-03-08T01:55:00-08:00</published><updated>2014-03-08T01:55:00-08:00</updated><id>http://localhost:4000/blog/2014/03/final-thoughts</id><content type="html" xml:base="http://localhost:4000/blog/2014/03/final-thoughts/">&lt;p&gt;I’ve been promising to write a wrap-up post about General Assembly and have continued to receive requests asking about what my experience was like and if I think it’s worth it. Now that it’s been almost 3 months since the program ended, I feel I can do a better job of wrapping it all up.&lt;/p&gt;

&lt;p&gt;To start with, if you’re someone who hasn’t read my Bootcamp Application Journey post, I’ll reiterate the point that General Assembly was the very last on my list of preferred bootcamps. I went there because I didn’t get accepted into any of my top choices and couldn’t afford Hack Reactor (though I likely wouldn’t have been accepted to Hack Reactor either). Information was so scarce on General Assembly that I questioned whether I might be better off just staying home to study on my own rather than spend the money, but I figured that I’d at least have the benefit of having the instructors to help me get unstuck when needed or to provide guidance. What also ended up convincing me to attend was their &lt;a href=&quot;https://generalassemb.ly/apprentice&quot;&gt;apprenticeship program&lt;/a&gt;, which I figured was a good worst-case scenario that I’d have no problem getting into.&lt;/p&gt;

&lt;p&gt;The conclusion that I came to at the end of the program was that it wasn’t worth $11,500; at least, not at the time that I took it. I’ve been envious of the current cohort at the SF General Assembly because it seems much more like what I was wanting out of my experience and the quality seems higher.&lt;/p&gt;

&lt;h2 id=&quot;why-i-didnt-think-it-was-worth-that-amount&quot;&gt;Why I didn’t think it was worth that amount&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Lack of the same amenities that other bootcamps give you for the same price&lt;/strong&gt;&lt;/li&gt;
  &lt;ul&gt;
    &lt;li&gt;No computer equipment to use&lt;/li&gt;
    &lt;li&gt;Uncomfortable chairs and classrooms&lt;/li&gt;
    &lt;li&gt;Lack of space (more on this below)&lt;/li&gt;
    &lt;li&gt;Lack of coffee half the time (I'm sorry, but this is oh so important and something I explicitly asked about before I agreed to attend)&lt;/li&gt;
    &lt;li&gt;Lack of a hiring day where you can interview with companies&lt;/li&gt;
    &lt;ul&gt;
      &lt;li&gt;At first I thought this was a benefit that General Assembly doesn't take recruiter fees for placing students with certain companies, but after seeing how effectively the other bootcamps were getting their students hired, I decided this was a downside.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/ul&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;They won’t tell you who the instructors are before you start&lt;/strong&gt;, so you have no way of knowing what the quality of teaching is going to be like.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Way less time to learn than advertised&lt;/strong&gt;&lt;/li&gt;
  &lt;ul&gt;
    &lt;li&gt;Consistently starting late&lt;/li&gt;
    &lt;li&gt;Consistently having long lunch hours&lt;/li&gt;
    &lt;li&gt;Consistently having breaks run long&lt;/li&gt;
  &lt;/ul&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;It lacked structure&lt;/strong&gt;. They had two different classrooms for our cohort where we were supposed to be generally learning the same thing at the same time, but that was often not the case. We’d compare notes and it was always so different, to the point that sometimes one class wouldn’t even get to the things the other class was learning. The lessons often seemed disorganized and frequently had errors.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Catering to those who aren’t paying attention in class.&lt;/strong&gt; There would be students who would sit there in class watching Netflix or browsing Reddit while the instructor was talking, and then the student would suddenly look up and ask the instructor to explain something they had just finished explaining, and the instructor would comply. Sure, this type of thing happens in most schools, but this isn’t supposed to be most schools. It’s supposed to be an intensive bootcamp that you are paying a lot of money for to learn and I felt that my opportunities to learn kept being stolen from me.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;No queue system for help until the end of the 5th week&lt;/strong&gt;, so it was often hard to get assistance. Sure I can google things as well as the next person, but I wasn’t paying GA $11,500 to get assistance from the internet, which I could have done from home.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The student code of conduct was kind of a joke.&lt;/strong&gt; The standards are not high, and they did not enforce any of it. Students could show up whenever they wanted, without penalty, and then the instructors would try to catch them up. They say you have to do all the pre-work before the first day of class, or else you won’t be able to start, but that wasn’t true at all. A lot of people said they didn’t do the pre-work and it showed because we had to spend the first couple weeks going over all the pre-work and teaching it to people who didn’t do it. I’m sorry, what did I waste those 50 hours doing the pre-work for when I could have just learned it in class?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Lack of space&lt;/strong&gt;. We’d be kicked out of the classrooms at 5:30pm on the dot and there’d be no where else for us to do our homework at General Assembly. This frustrated a lot of my classmates because we wanted to get work done around our peers. General Assembly advertised that we would be able to work up in this other area after class ended, but they were having other classes up there most of the time. Towards the end of the 3 months they tried to make more space for us by moving the staff from the main area to another office, but by then the course was mostly over.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Other classes being disruptive by being noisy&lt;/strong&gt;. The noise from both the UXDi class and the mezzanine classes were a recurring issue, and yet if we were the least bit noisy during our break we were yelled at.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We were told that we’d be doing so many &lt;strong&gt;mock interviews&lt;/strong&gt; that we’d be sick of them. Not true. There was one mock interview, and then I managed to squeeze in another one with an instructor at the last minute during final projects. I felt so unprepared, and unfortunately was unable to practice the pointers they gave me since that was it. No more class.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The curriculum said they’d teach you &lt;strong&gt;pair programming&lt;/strong&gt; but there was only a single instance in the entire course that they did a lab where we had to pair program. On that note, there were other things listed in the curriculum that didn’t get taught either.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Complete lack of feedback&lt;/strong&gt;. The website advertised that you would be receiving feedback on your progress every week from the instructors and that there'd be one-on-one attention. The first couple weeks we weren't even getting any feedback on our homework, let alone feedback on how we were doing. You can only really judge yourself in these instances to a certain extent. I really wanted to know what they thought of my solutions and if my code was messy, etc. The one-on-ones with the instructors were sporadic. We did 3 major projects in the program and I didn't receive any feedback whatsoever on the first 2 I did. I was shocked when people came up to me after the 3rd and final project to tell me they really liked it, since I was used to no one mentioning the projects at all.&lt;/li&gt;
  &lt;ul&gt;
    &lt;li&gt;On that note I was also disappointed and depressed after the presentations of the first project. To work so hard on something and then have them rush through your presentation because they're anxious to get done so the class could start drinking (full disclosure: I'm not much of a drinker) and then not ever get to hear how I did on the project and having it just be dismissed&amp;mdash;that was frustrating. It was after that first project that I really wanted to just drop the program. Weeks of being unhappy with the quality of the program culminated in this event and the following week was the first time I missed turning in a homework assignment because I thought, &quot;Fuck it, it's not like they'll notice or care.&quot;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Our cohort ended up not getting an &lt;strong&gt;apprenticeship program&lt;/strong&gt; due to lack of participation from any companies. Since this was the deciding factor in me even attending, I was disappointed and furious. I thought they had more established structure in place. I think they need to be more transparent about this on their website; that the apprenticeship program is not a definite thing that is available to every cohort.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I was told that 96% of students get the kind of job they were looking for within 3 months of the program ending. Either that statistic is invalid or our cohort changed it drastically. Some weren’t looking for jobs after the program ended and were just doing it to enrich themselves. At this point, out of the people who were wanting jobs afterwards though, only 1 of my classmates has gotten a full-time position as a Ruby on Rails Software Engineer; 4 or 5 have gotten internships for front-end and full-stack (I believe); and a couple went back to what they were doing before the program after unsuccessfully finding anything. The rest are still looking for something.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;things-i-did-enjoy-about-the-program&quot;&gt;Things I Did Enjoy About the Program&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;I learned tons more about back-end development, just not enough to get an entry-level position doing back-end/full-stack.&lt;/li&gt;
  &lt;li&gt;It really lit the fire under my ass to create project after project to practice, learn, and produce. I created much more during the program than I’ve created in years.&lt;/li&gt;
  &lt;li&gt;I finally got some experience using Github to collaborate instead of just using it as a versioning system for myself.&lt;/li&gt;
  &lt;li&gt;It increased my confidence as a web developer because I knew so much more about the entire stack.&lt;/li&gt;
  &lt;li&gt;I met some really great people in the course whom I now continue to be friends with.&lt;/li&gt;
  &lt;li&gt;Getting to take a few field trips to local companies, see their offices, and hear about how they do things was pretty awesome.&lt;/li&gt;
  &lt;li&gt;The producer and administrative staff are really nice and I definitely felt like they wanted to help me succeed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;I know some of my classmates thought I was taking things way too seriously, but this wasn’t just something to do on a whim, or that parents were paying for, etc. &lt;strong&gt;This was my life&lt;/strong&gt;. Failure was not an option and it was a big risk for me to take out a loan when I was already so much in debt, without knowing whether it would pay off, not to mention my happiness being on the line. As it turns out, General Assembly just wasn’t the right bootcamp for someone like me who was looking for a high-intensity learning environment where everyone was really dedicated. I know I would have enjoyed a place like Hack Reactor far better or even Dev Bootcamp.&lt;/p&gt;

&lt;p&gt;The bootcamp experience is different for everyone, even in the same cohorts. It’s a work in progress, and it can be especially different depending on what your personal goals are, and what you hope to accomplish. I know some of my classmates were satisfied with the experience and I know some who were upset with the same things I was. Do I think it was better than staying home to continue learning on my own? Absolutely. Do I think it was worth $11,500? Not at all. I think the price tag should have been reduced, but maybe the quality has changed and it’s justified now. That’s something you’ll have to decide for yourself. This all really only reflects the experience I had at the time.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;One of the big questions people have emailed me to ask is whether someone who has no programming experience can really get a job after doing this program&lt;/strong&gt;. In addition to the statistics of my classmates above I’ll say this:&lt;/p&gt;

&lt;p&gt;Right now the San Francisco Bay Area is flooded with entry-level software engineers. There is no shortage of developers, but there &lt;em&gt;is&lt;/em&gt; a shortage of skilled developers. I was constantly lauded by my classmates for being really good at programming and I was told by a member of the staff that I was one of the top students they had ever had in any of the cohorts. On top of that all my friends work in the local tech scene and I have great contacts and lots of opportunities to network. &lt;em&gt;I still couldn’t find a job as a Ruby on Rails developer&lt;/em&gt;. My opinion is that General Assembly would be a good start to your learning, but you’re going to have to put in a lot of work afterwards to continue gaining skills and experience. Don’t expect to come out of this bootcamp and have a job right away.&lt;/p&gt;

&lt;p&gt;Since companies are only interested in my front-end development skills (I’ve been doing front-end for half my life), I finally accepted that I’m just going to have to continue doing front-end and hope that I can slowly work myself into a full-stack role eventually.&lt;/p&gt;</content><author><name>amy@amy-mac.com</name></author><category term="bootcamps" /><category term="Ruby" /><category term="Ruby on Rails" /><category term="programming" /><category term="General Assembly" /><summary type="html">I’ve been promising to write a wrap-up post about General Assembly and have continued to receive requests asking about what my experience was like and if I think it’s worth it. Now that it’s been almost 3 months since the program ended, I feel I can do a better job of wrapping it all up.</summary></entry><entry><title type="html">More Ember Thoughts</title><link href="http://localhost:4000/blog/2014/02/More-Ember-Thoughts/" rel="alternate" type="text/html" title="More Ember Thoughts" /><published>2014-02-02T02:26:00-08:00</published><updated>2014-02-02T02:26:00-08:00</updated><id>http://localhost:4000/blog/2014/02/More-Ember-Thoughts</id><content type="html" xml:base="http://localhost:4000/blog/2014/02/More-Ember-Thoughts/">&lt;p&gt;After 4 days of working with Ember, these are my thoughts about it.&lt;/p&gt;

&lt;p&gt;##Things I Don’t Like About Ember&lt;/p&gt;

&lt;p&gt;###Input Helpers&lt;/p&gt;

&lt;p&gt;They don’t let you use all the same options you’d be able to use in a normal input element, like &lt;code&gt;required=true&lt;/code&gt;. You can just use a normal input element, but then you don’t have the luxury of the value binding to a property in the controller.&lt;/p&gt;

&lt;p&gt;###Automated magic&lt;/p&gt;

&lt;p&gt;Ember makes a lot of things easier on you by doing some “magic” behind the scenes, but when those things don’t perform the way they’re supposed to, it’s hard to tell why. That’s the advantage of having to spell everything out yourself–it makes it much easier to fix things when they don’t perform the way they ought to.&lt;/p&gt;

&lt;p&gt;###Handlebars Helpers&lt;/p&gt;

&lt;p&gt;Sometimes they’d work and sometimes they wouldn’t and I could never tell what the deciding factor was.&lt;/p&gt;

&lt;p&gt;###Model Relationships&lt;/p&gt;

&lt;p&gt;I expected these to work the same way they do in Rails with the &lt;code&gt;belongsTo&lt;/code&gt; and &lt;code&gt;hasMany&lt;/code&gt;, etc. But you can’t reference them the same way you would in Rails and I became very frustrated when trying to display the comments for a post.&lt;/p&gt;

&lt;p&gt;###The Guides&lt;/p&gt;

&lt;p&gt;I felt like the guide on the website was really lacking, at least compared to Backbone’s guides. They read more like a tutorial instead of explaining thoroughly how you use each feature. They do have the API section, which I think is more similar to what I wanted, but it is overwhelming at a glance.&lt;/p&gt;

&lt;p&gt;##Things I Do Like About Ember&lt;/p&gt;

&lt;p&gt;###Automated magic&lt;/p&gt;

&lt;p&gt;When you’re doing the basic setup for the site, it is really quick and easy. I’m also impressed with the way it updates values that are changed instantly across the site, without you explicitly having to tell it to re-render those items.&lt;/p&gt;

&lt;p&gt;###The structure&lt;/p&gt;

&lt;p&gt;Ember reminds me a lot of Rails, not just because of the MVC aspect but the way they do their routes and models. I like that it reminds me of Rails.&lt;/p&gt;

&lt;p&gt;###The routing&lt;/p&gt;

&lt;p&gt;Speaking of the way Ember does routes, I found it so much more straightforward and easy compared to the built in routing feature of Backbone.js that I ended up not even using, in favor of Page.js. The octothorpe in the url is annoying but I’m certain that could be gotten around the same way you can in Backbone. In the same vein, I like how easy they make it to transition to another “page” with something like this: &lt;code&gt;this.transitionTo('page');&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###The Chrome extension&lt;/p&gt;

&lt;p&gt;There is a &lt;a href=&quot;https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi?hl=en&quot;&gt;chrome devtools extension for Ember&lt;/a&gt; and it’s incredibly useful and awesome. I wish Backbone had an extension like that (maybe some day I should build one?)&lt;/p&gt;

&lt;p&gt;##Final Thoughts&lt;/p&gt;

&lt;p&gt;I am intrigued enough to continuing playing around with Ember. One of the things that was frustrating me would not even be an issue if I was using a RESTful API to serve information to Ember instead of using LocalStorage and relying on Ember’s built in model relationships. I also know that a part of getting used to any technology is learning its quirks and how to work around that. So far I think Ember would be better for more simplistic apps, but I would have to build out a site more with it to be certain of that opinion.&lt;/p&gt;</content><author><name>amy@amy-mac.com</name></author><category term="Ember.js" /><category term="JavaScript" /><summary type="html">After 4 days of working with Ember, these are my thoughts about it.</summary></entry><entry><title type="html">Day One with Ember</title><link href="http://localhost:4000/blog/2014/01/Day-One-with-Ember/" rel="alternate" type="text/html" title="Day One with Ember" /><published>2014-01-25T12:26:00-08:00</published><updated>2014-01-25T12:26:00-08:00</updated><id>http://localhost:4000/blog/2014/01/Day-One-with-Ember</id><content type="html" xml:base="http://localhost:4000/blog/2014/01/Day-One-with-Ember/">&lt;p&gt;I recently started giving myself a crash course in &lt;a href=&quot;http://emberjs.com&quot; title=&quot;Ember.js&quot;&gt;Ember.js&lt;/a&gt; to do a quick example app for a job interview. I was pretty sure I could pick it up quickly since once thing I definitely learned in the bootcamp was how to learn fast and work quickly. This certainly isn’t ideal for most real world situations because you want to produce high quality sites and apps which require proper planning, testing, and attention to detail. But it’s nice to know what I am capable of doing in a pinch.&lt;/p&gt;

&lt;p&gt;One of the things that is really starting to amaze me is that the more I learn about all these different technologies the less scary everything looks, as a whole. When I look at new languages, they don’t look like Greek and I can generally get the gist of what they’re doing. It’s also the same with JavaScript frameworks, though I’m really only on my 2nd right now. After about 8 hours of working with Ember.js it reminds me so much of Rails with its naming conventions and automated “magic.” I can see how Backbone.js gives you so much more liberty, which is nice, but Ember.js makes specific things quicker and easier because of the conventions. An example is when you’re looping over a collection in its template, you don’t have to specify the variables for what you’re looping over because it knows that you’re probably going to want to loop over the collection of objects that are associated with that template and controller.&lt;/p&gt;

&lt;p&gt;You could write this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erb&quot; data-lang=&quot;erb&quot;&gt;  {{#each user in users}}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{user.name}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  {{/each}}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But Ember will let you write this instead:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erb&quot; data-lang=&quot;erb&quot;&gt;  {{#each}}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{name}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  {{/each}}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Convenient, right? So I’m feeling pretty comfortable with Ember so far, since it reminds me of Rails but written in JavaScript, and the Handlebars templating was super easy to get used to since it’s the same syntax I’ve started using with liquid tempting in my Jekyll blog. I still have a lot more to learn in Ember as I continue over the next couple days, but I’m becoming very intrigued with some of its object modeling features that I was reading up on, since again, it’s the same things I’m used to seeing in Rails, with the model relationships, and designating what the attribute types are going to be, even without dealing with a traditional database. I’m really excited to continue playing with it, and wonder if (or how) I’ll decide that one is better than the other—Backbone or Ember?&lt;/p&gt;</content><author><name>amy@amy-mac.com</name></author><category term="Ember.js" /><summary type="html">I recently started giving myself a crash course in Ember.js to do a quick example app for a job interview. I was pretty sure I could pick it up quickly since once thing I definitely learned in the bootcamp was how to learn fast and work quickly. This certainly isn’t ideal for most real world situations because you want to produce high quality sites and apps which require proper planning, testing, and attention to detail. But it’s nice to know what I am capable of doing in a pinch.</summary></entry><entry><title type="html">Jekyll Conversion Complete</title><link href="http://localhost:4000/blog/2014/01/jekyll-conversion/" rel="alternate" type="text/html" title="Jekyll Conversion Complete" /><published>2014-01-22T12:03:00-08:00</published><updated>2014-01-22T12:03:00-08:00</updated><id>http://localhost:4000/blog/2014/01/jekyll-conversion</id><content type="html" xml:base="http://localhost:4000/blog/2014/01/jekyll-conversion/">&lt;p&gt;I finally finished liberating my blog from Wordpress’ clutches a few days ago and getting it set up with Jekyll instead. It feels really great to have so much more control over it and to have it also be more lightweight.&lt;/p&gt;

&lt;p&gt;After getting it set up with my current website design, I started preparing it for uploading and realized it didn’t make sense to keep the files separate from the main part of my website and decided to translate my webpages into the Jekyll format as well. This actually has also been such a relief organizationally because I’ve gotten spoiled by templates in all my web app work and can now set up templates easier for my own simple and static site. I still have a lot of work to do in fine-tuning it and adding features to the blog but it’s a nice start and I’m really excited to work on it more.&lt;/p&gt;

&lt;p&gt;I’m also excited that I can more easily use whatever syntax highlighting stylesheets I want, so now I can force the &lt;em&gt;Tomorrow Night&lt;/em&gt; theme on everyone else. I’d say that my only real complaint so far is that it publishes drafts even though it’s not supposed to, but that may actually have to do with the paginator feature and I could probably circumvent it by adding in a conditional that checks the YAML variable for published.&lt;/p&gt;</content><author><name>amy@amy-mac.com</name></author><category term="Jekyll" /><category term="Blogging" /><summary type="html">I finally finished liberating my blog from Wordpress’ clutches a few days ago and getting it set up with Jekyll instead. It feels really great to have so much more control over it and to have it also be more lightweight.</summary></entry><entry><title type="html">Arbitr Project</title><link href="http://localhost:4000/blog/2014/01/arbitr-project/" rel="alternate" type="text/html" title="Arbitr Project" /><published>2014-01-06T18:17:05-08:00</published><updated>2014-01-06T18:17:05-08:00</updated><id>http://localhost:4000/blog/2014/01/arbitr-project</id><content type="html" xml:base="http://localhost:4000/blog/2014/01/arbitr-project/">&lt;figure&gt;
  &lt;a class=&quot;th&quot; href=&quot;http://usearbitr.com&quot; title=&quot;Arbitr&quot;&gt;
  &lt;img src=&quot;http://localhost:4000/images/2014/Voila_Capture86.jpg&quot; alt=&quot;Arbitr Splash page
&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption&gt;Arbitr Splash page&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The final project that I created in WDI was an app that had been on my mind for quite a few months because it was an app that my husband, Jesse, had been wanting someone to build since February 2013. He is an assistant debate coach and spends most of his weekends during the school year at Debate Tournaments. There is a particular way that both the judges and the teams track debate rounds and they are referred to as flows. A textbook shows an example of a flow as this:&lt;/p&gt;

&lt;figure&gt;
  &lt;a class=&quot;th&quot; href=&quot;http://localhost:4000/images/2014/Flow_Note_Sample.jpg&quot; title=&quot;An example of a flow&quot;&gt;
    &lt;img src=&quot;http://localhost:4000/images/2014/Flow_Note_Sample.jpg&quot; alt=&quot;an example of a flow&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption&gt;An example of a flow&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;When in reality they end up looking more like this in the heat of the round:&lt;/p&gt;

&lt;figure&gt;
  &lt;a class=&quot;th&quot; href=&quot;http://localhost:4000/images/2014/IMG_5063-e1388441427372-1024x789.jpg&quot;&gt;
    &lt;img src=&quot;http://localhost:4000/images/2014/IMG_5063-e1388441427372-1024x789.jpg&quot; alt=&quot;a handwritten example flow&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption&gt;A handwritten example flow&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;So Jesse had looked extensively to find a better tool for flowing a debate round. Some people tried to use Excel, but most people just settled on handwriting everything. Being unable to find any kind of software or tool that was ideal for the situation, Jesse decided that someone needed to build an app for this and he knew that if effective, it would become a popular tool.&lt;/p&gt;

&lt;p&gt;I thought about creating the app for him for the first WDI project, but mistakenly thought it would be way too easy to build and therefore wouldn’t be a good project during the program. By the time the final project rolled around I knew enough to know that the app would be far more complicated than I had originally anticipated, which made it a great final project. We were also lucky enough to have 2 weeks to do our final project, instead of just the single week we had with the previous two.&lt;/p&gt;

&lt;h2 id=&quot;project-planning&quot;&gt;Project Planning&lt;/h2&gt;

&lt;p&gt;I spent the entire first weekend project planning. I had already been compiling ideas, and had a good idea of what technologies I was going to need. I planned on using &lt;a href=&quot;http://backbonejs.org/&quot;&gt;Backbone.js&lt;/a&gt; even though I had struggled with it the week we learned it in class, because I knew the app would be so client-side heavy and need to be really responsive to user input and actions. One of the reasons I had struggled with it in class was because we learned it in &lt;a href=&quot;http://coffeescript.org/&quot;&gt;CoffeeScript&lt;/a&gt;, and I wasn’t comfortable with CoffeeScript at all, and often only understood what was going on when I looked at the compiled JavaScript versions. So I was very conflicted as I was about to start this project. Did I want to re-learn Backbone.js in vanilla JavaScript and probably understand it better? Or did I want to struggle and try to learn it again using CoffeeScript? I ended up deciding to push through and continue with CoffeeScript. I was very worried that I would regret this, but luckily &lt;a href=&quot;http://js2coffee.org/&quot;&gt;this awesome site&lt;/a&gt; saved me whenever I couldn’t figure out exactly how to write something in CoffeeScript.&lt;/p&gt;

&lt;p&gt;I also was initially conflicted on what I was going to use as the back-end. Of course Rails would be a natural choice because everything was so Rails focused in the program, but I was highly considering &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; as a better option, or possibly not having my own back-end at all and interfacing with a &lt;a href=&quot;https://parse.com/&quot;&gt;Parse&lt;/a&gt; cloud database instead. I wanted to use the best tools for the job instead of just settling on what I already knew, but after discussing it with an instructor it became clear that Rails would be the best option for the time being, since it could possibly take me the entire 2 weeks to get comfortable with Node.js, and with Parse I wouldn’t have any work to show for the back-end.&lt;/p&gt;

&lt;p&gt;During the weekend of planning, I hit a huge bump with the data modeling. After discussing with Jesse more of the details surround the Debate events and what kind of interactions the site would need, I spent an entire day just working through how to do the database schema and object models, and at one point worried I would have to abandon the project because it’d be too complicated. After many pages of writing as I worked through it I realized I had been thinking about it the wrong way and came out with something much simpler than I thought it’d be.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;http://localhost:4000/images/2014/Voila_Capture87.jpg&quot; alt=&quot;data modeling&quot; /&gt;
  &lt;figcaption&gt;Data Modeling&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;project-week-1&quot;&gt;Project Week 1&lt;/h2&gt;

&lt;p&gt;With the initial planning stage over I was ready to start fresh on Monday morning with setting up the Rails project, and starting on the Rspec tests as I built out my models. That went pretty quickly since it was all things I had already done many times before, but then came the hard part of starting to set up the Backbone framework on top of Rails and start building it out. I found &lt;a href=&quot;http://railscasts.com/episodes?utf8=%E2%9C%93&amp;amp;search=backbone&quot;&gt;these Railscasts&lt;/a&gt; very helpful in the initial set up, especially since it was in CoffeeScript, but I later ran into problems when trying to follow it too literally and had to branch off to do things my own way.&lt;/p&gt;

&lt;p&gt;The first few days with Backbone were pretty rough. It wasn’t necessarily Backbone itself that was so difficult, though of course I was still learning it so extra time was involved in that, but getting Backbone to talk back and forth with Rails took up a lot of initial time and I ended up queueing myself for help from the instructors at least once every hour. Those first couple days I was only concentrating on getting the user accounts and sessions set up with Backbone and had to figure out the best way to pass variables to the front-end so that the page would recognize whether there was a current user or not and act accordingly. I ended up going with the &lt;a href=&quot;https://github.com/gazay/gon&quot;&gt;Gon gem&lt;/a&gt; for that, though I continued to have problems with finding the right place in the Rails controllers to set it so that it knows to update itself when things change.&lt;/p&gt;

&lt;p&gt;After the first two days of actual coding all I had was the back-end set up for users and sessions and just enough Backbone set up on the front-end to log in and out of the app and set up new users. I felt like progress was going too slowly but those first couple days struggling with getting Rails and Backbone to work together were so important to the learning process and I had a lot fewer issues after that because I was getting into the swing of things and was able to concentrate more fully on Backbone. One big problem I had though, that was related to Backbone, is that I couldn’t get the Routers to work successfully unless it was all in the same Router. An instructor advised against using the built in Routers and pushed me towards using &lt;a href=&quot;http://visionmedia.github.io/page.js/&quot;&gt;Page.js&lt;/a&gt;, which ended up being pretty user-friendly and has worked pretty decently.&lt;/p&gt;

&lt;p&gt;I had 3 main parts I needed to create and each one went one level deeper under the other so I started at the top level, working on setting up Tournaments in Backbone, which was one of the easier parts: allow people to add a tournament and it would display in a list.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/2014/Voila_Capture88.jpg&quot; alt=&quot;Tournament Index&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The biggest challenge I ran into on this part was getting the tournament list to sort by tournament date instead of tournament id. This is something that would normally be very easy if you’re just doing it in Ruby, but since Backbone has its own collections that it refreshes on a regular basis, it’s a little trickier…or so I thought. I kept trying to use .sortBy after the collection is fetched but was having no luck getting it to reflect the way I wanted it to sort. It turns out that Backbone actually has a built in property that makes it easy peazy to automatically sort a collection by whatever field you specify: the comparator property, which is ideal because whenever you add a new item to a collection it already knows that it needs to be sorted that way and inserts the item into the correct spot in the list.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DebateJudge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Tournaments&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Backbone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Collection&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/api/tournaments'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DebateJudge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Tournament&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'date'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next part to work on was Rounds to go beneath each of the Tournaments and that ended up taking up the last couple days of the week. The Rounds index underneath each of the tournaments included event categories: Lincoln Douglas, Parli, Public Forum, and Policy, and any time a round was created it needed to go under the correct event, so there were lots of collections involved.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/2014/Voila_Capture89.jpg&quot; alt=&quot;Rounds Index&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the huge hurdles I crossed concerning rounds was problems with loading and refreshing data since it was doing it asynchronously. The DOM wouldn’t be loaded yet and my Backbone views would be trying to append data and HTML elements to other elements that didn’t exist yet. The real life saver with this was telling the Backbone views to specifically append to “this” view element that was going to be loaded. So it would append to that view’s element before it tried to load that view on that page. An example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;na&quot;&gt;appendTournament&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tourney&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;rounds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DebateJudge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Rounds&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'tournament_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tourney&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DebateJudge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Views&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Tournament&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tourney&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'#tournaments'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since the &lt;code class=&quot;highlighter-rouge&quot;&gt;#tournaments&lt;/code&gt; element refers to an element that lives inside the template of the view, the &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt; symbol (which refers to ‘this’ in CoffeeScript) solved the append issues. Another really great benefit of specifying to look for a DOM element within that Backbone view, as opposed to the entire DOM is that when you’re toggling an element by classname it will target only the one that was generated by that view instead of every element with that classname. This was very important since I have so many views that are being generated with the same classname, such as rounds, or contentions within the rounds, that need to be interacted with separately.&lt;/p&gt;

&lt;h2 id=&quot;project-week-2&quot;&gt;Project Week 2&lt;/h2&gt;

&lt;p&gt;The next part that I needed to work on was really the most important part and the beef of what the site was all about: the Round page where all the action would be taking place. Before I even started working on the contentions that would be within each Round, I had to create the view for a Round and the workspace that the contentions would eventually be in. I spend an entire day just working on the CSS that would be this page. I knew from before I even started working on the project what I had in mind for the Round workspace. I have not yet mastered drawing with my huge stylus on my iPad mini, so this was my original messy sketch:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/2014/photo_1.png&quot; alt=&quot;Round Page Wireframe&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All the events have a different amount of columns and at first I thought I was going to have to create a different template for each of the event categories, but luckily I realized before I started coding it that that would be too much duplicate work and was able to create just one view template that would be able to generate the different layouts for each of the events. Where the difficulty with the CSS came in is that I knew I needed a page that was going to be able to scroll horizontally to be able to accommodate a varying amount of columns, and that it couldn’t just wrap because the columns themselves would be varying heights and the user would need to be able to always compare one column with the next one. So I needed the page to scroll horizontally, and I needed each column to be a somewhat set height and have its own scroll bar so you wouldn’t have to worry about the page getting so long that the user would have to scroll up and down.&lt;/p&gt;

&lt;p&gt;Having been a heavy-duty user of &lt;a href=&quot;https://trello.com/&quot;&gt;Trello&lt;/a&gt; for 2 years now, it ended up being a huge inspiration for me because their layout is extremely similar to the layout that I wanted to create for my app, but creating that kind of layout is not as easy as it might seem. You definitely need an excessive use of divs and I thought I could get away with having the bare minimum but alas, I had to appease the powers that be. After spending most of a day just working on perfecting the CSS for the layout I ended up actually forcing myself to say, “That’s good enough for now,” because I couldn’t get the bottom to be responsive, which is really important, but I needed to move on to other things because of the time constraints.&lt;/p&gt;

&lt;p&gt;After that I had 3 days left before the project was due and started into high anxiety mode of needing to use the rest of my time as productively as possible. I still had to create the last piece of the puzzle: the contentions. All the individual little pieces of text that were really the most important aspect of the entire thing. Creating the contentions is their most basic form was not difficult because it’s the same idea I’d already been doing over and over—let the user create information and immediately add it to the page. The real work though was adding all the features to the contentions that would trump working it all out on paper.&lt;/p&gt;

&lt;p&gt;One issue I ran into immediately was that there wasn’t a straightforward way of specifying in the automatic call to the API that I wanted only the contentions for a specific round. The best I could do at the time was get only the contentions for the current user, which means that a lot of unnecessary data is being loaded for each Round page and could very well get out of hand if the user uses the site enough. This obviously needs to be fixed and would probably just be a matter of passing a parameter to the API that it could use to filter the contentions, but since it didn’t interfere with the site working at the time, I pushed onwards.&lt;/p&gt;

&lt;p&gt;After the day of getting the contentions to work in their most basic form I decided to do my initial deploy to Heroku in order to have time to troubleshoot any issues that arose in production, and that took the rest of the evening and the next morning. The first problem I had with the deploy to Heroku is one that I was familiar with because of the same problem with the group project I had done previously. The Rails helpers that are supposed to automatically find all the CSS &amp;amp; JS assets in the html header weren’t doing their job, so I had to manually go in and specify the files. With that fixed the second issue that stumped me was that some of the page was showing but not all of it. I figured there must be something weird about deploying a Backbone.js app to Heroku but when talking to a classmate who was also using Backbone.js she said that she didn’t have any issues, so I delved deeper. It turned out to be a simple case of having broken something that was previously working and not realizing I had broken it because I hadn’t looked back at it in a while.&lt;/p&gt;

&lt;p&gt;After fixing those bugs I spent the rest of the day finessing the contentions. I made the contentions editable, deletable, and added in a label that could be toggled showing at a glance whether a contention had been refuted or not. I also added in the ability to delete rounds, if need be. There were tiny hiccups here and there for but for the most part that all went smoothly. I also realized that I should probably have some kind of splash page so spent the final part of the day rearranging some of the code in order to add a very basic page that I planned on fleshing out later.&lt;/p&gt;

&lt;p&gt;On the final day of being able to work on the project I decided that I would only let myself work on additional features for the first half of the day and then concentrate on styling and bug fixing for the rest of the time. The two big features I had on my agenda were a timer and the ability for users to enter markdown into the contention fields. The timer was a feature requested by Jesse from Day 1 because teams keep their own time during a speech and signal each other if it’s about to run out. Six months prior to starting on the project I had planned on writing my own timer for it, but a classmate had come across a &lt;a href=&quot;https://github.com/jylauril/jquery-runner&quot;&gt;timer&lt;/a&gt; in October that was exactly what I needed, so I had already looked into that and played with it a little. I figured the timer would be quick and easy for that reason and that the Markdown feature would take up most of the morning, but it ended up being the other way around.&lt;/p&gt;

&lt;p&gt;I had no problem getting the timer to work when I was playing with it in a simple html page and js file, but had to invoke the function in a different way in my Backbone app in order to get it to function properly. I also had to add in ways for the user to be able to set the time over and over, since the time for each speech in a round varies. It all ended up working out beautifully after the initial struggle.&lt;/p&gt;

&lt;p&gt;The markdown was necessary because in basically all scenarios of debate judging the user is going to want the ability to use bullet points and separate paragraphs rather than having some large chunk of text that’s not easy to read at a glance. I was worried that it would be difficult to implement, but was fairly simple and took hardly any time. I had spent a lot of research time leading up to the last day figuring out the best markdown method to use and decided on &lt;a href=&quot;https://github.com/evilstreak/markdown-js&quot;&gt;Markdown.js&lt;/a&gt;. It was everything I wanted and easy to implement. Besides adding in the .js file, all I had to do was create this function to use on each contention as it gets rendered on the page:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;na&quot;&gt;applyMarkdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.markdown'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toHTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From there on out it was all bug-fixing and styling and showing it to Jesse when I got home that evening and then doing a ton more styling changes after getting his feedback. There was so much more that I wanted to do with it but the MVP to present to my class the next day was finished. I did my final push to Heroku and refused to let myself pick at it the next morning as we were waiting for presentations to start.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;th&quot; src=&quot;http://localhost:4000/images/2014/arbitr_lg.jpg&quot; alt=&quot;round page example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I spent my entire presentation time giving a tour of the app and talking about what it does, as well as explaining all the Debate stuff, and then ran out of time so I didn’t get to show any of my code to my classmates. The feedback was overwhelmingly positive, however, and I was surprised by it. I figured that this project would be the one that was least interesting because it’s such a niche thing, but it was my only project that people came up to tell me they liked, and I discovered a few people who used to be debaters in high school and/or college. It was a great way to end to the bootcamp.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s Next&lt;/h2&gt;

&lt;p&gt;I have a wishlist of features that I’m continuing to implement whenever I have a moment as well as a long list of bugs to fix. Here are some of the features I will be adding in the immediate future:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Offline Storage
    &lt;ul&gt;
      &lt;li&gt;This is necessary because the teams don’t always have wifi at the location of the tournament. I plan on implementing HTML5 Local Storage features that will sync back up with the server whenever online.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Email for forgotten passwords&lt;/li&gt;
  &lt;li&gt;Visual link between contentions
    &lt;ul&gt;
      &lt;li&gt;The user needs to not only be able to designate which contention refuted another contention, but a visual link needs to be made so this can be quickly determined. I plan on either using the HTML5 Canvas or &lt;a href=&quot;http://d3js.org/&quot;&gt;D3.js&lt;/a&gt; to draw lines between the linked contentions.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m dedicated to this project and am excited that it’s going to get a lot of use very quickly as the debate season starts back up. Anyone interested in following along can find it on Github &lt;a href=&quot;https://github.com/amy-mac/debate_judge&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>amy@amy-mac.com</name></author><category term="Backbone.js" /><category term="CoffeeScript" /><category term="General Assembly" /><category term="programming" /><category term="Rails" /><summary type="html">Arbitr Splash page</summary></entry><entry><title type="html">I’m Alive</title><link href="http://localhost:4000/blog/2013/12/im-alive-2/" rel="alternate" type="text/html" title="I'm Alive" /><published>2013-12-20T13:53:45-08:00</published><updated>2013-12-20T13:53:45-08:00</updated><id>http://localhost:4000/blog/2013/12/im-alive-2</id><content type="html" xml:base="http://localhost:4000/blog/2013/12/im-alive-2/">&lt;p&gt;There are two reasons that I stopped posting blog entries after the 6th week of WDI. The main reason is that I’ve simply been too busy. During the 7th week I was so busy on the 2nd project, which was a group project, and after that it just continued to stay busy; every spare minute I was either working on homework, projects, or studying. I even started to feel behind when I let myself go out a couple times. It’s no joke, you cannot try to have a social life while doing a bootcamp.&lt;/p&gt;

&lt;p&gt;The 2nd, lesser, reason is that I have been in the process of transitioning my blog from a Wordpress format to &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. I’m not finished doing so yet, but I’ve had little time to work on it since it’s not a priority compared to schoolwork. Since I had already exported my Wordpress posts and set them up with Jekyll I didn’t want to keep adding posts to Wordpress. It finally got to the point though that I decided I shouldn’t let this transition prevent me from writing.&lt;/p&gt;

&lt;p&gt;So yesterday was the last day of class, and it’s bittersweet. It’s been a long, short 3 months. I’ve been living in this bubble and have emerged shocked to find out that it’s almost Christmas. I thought it was still October? I’m nervous about going back to the real world, but also excited at the adventures and opportunities that lie ahead. I have a lot of catching up to do on blogging and getting back in touch with my friends and relatives. My life is going to continue to be busy for the time being, but there’s less pressure now so I can start having my evenings and weekends back. Looking forward to sharing more of my experiences at General Assembly soon.&lt;/p&gt;</content><author><name>amy@amy-mac.com</name></author><category term="General Assembly" /><summary type="html">There are two reasons that I stopped posting blog entries after the 6th week of WDI. The main reason is that I’ve simply been too busy. During the 7th week I was so busy on the 2nd project, which was a group project, and after that it just continued to stay busy; every spare minute I was either working on homework, projects, or studying. I even started to feel behind when I let myself go out a couple times. It’s no joke, you cannot try to have a social life while doing a bootcamp.</summary></entry></feed>